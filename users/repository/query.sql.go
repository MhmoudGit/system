// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET is_active = TRUE,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) ActivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const addPermissionToRole = `-- name: AddPermissionToRole :exec
UPDATE roles
SET permissions = array_append(permissions, $2),
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type AddPermissionToRoleParams struct {
	ID          int32
	ArrayAppend interface{}
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.Exec(ctx, addPermissionToRole, arg.ID, arg.ArrayAppend)
	return err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, name)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  role_name, permissions
) VALUES (
  $1, $2
)
RETURNING id, role_name, permissions, created_at, updated_at, deleted_at
`

type CreateRoleParams struct {
	RoleName    string
	Permissions []string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.RoleName, arg.Permissions)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, password, first_name, last_name, phone_number, is_active, role
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, username, email, password, first_name, last_name, phone_number, is_active, role, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username    string
	Email       string
	Password    string
	FirstName   pgtype.Text
	LastName    pgtype.Text
	PhoneNumber pgtype.Text
	IsActive    pgtype.Bool
	Role        int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.IsActive,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsActive,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET is_active = FALSE,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeactivateUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getPermission = `-- name: GetPermission :one

SELECT id, name, created_at, updated_at, deleted_at FROM permissions
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

// ----------------------Permissions------------------------
func (q *Queries) GetPermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRole = `-- name: GetRole :one

SELECT id, role_name, permissions, created_at, updated_at, deleted_at FROM roles
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

// ----------------------ROLES--------------------------------------
func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, first_name, last_name, phone_number, is_active, role, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsActive,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeletePermission = `-- name: HardDeletePermission :exec
DELETE FROM permissions
WHERE id = $1
`

func (q *Queries) HardDeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeletePermission, id)
	return err
}

const hardDeleteRole = `-- name: HardDeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) HardDeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteRole, id)
	return err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const listPermissions = `-- name: ListPermissions :many
SELECT id, name, created_at, updated_at, deleted_at FROM permissions
WHERE deleted_at IS NULL
ORDER BY name
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, role_name, permissions, created_at, updated_at, deleted_at FROM roles
WHERE deleted_at IS NULL
ORDER BY role_name
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, first_name, last_name, phone_number, is_active, role, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.IsActive,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
UPDATE roles
SET permissions = array_remove(permissions, $2),
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type RemovePermissionFromRoleParams struct {
	ID          int32
	ArrayRemove interface{}
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.Exec(ctx, removePermissionFromRole, arg.ID, arg.ArrayRemove)
	return err
}

const softDeletePermission = `-- name: SoftDeletePermission :exec
UPDATE permissions
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeletePermission, id)
	return err
}

const softDeleteRole = `-- name: SoftDeleteRole :exec
UPDATE roles
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteRole, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions
SET name = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdatePermissionParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.Exec(ctx, updatePermission, arg.ID, arg.Name)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET role_name = $2,
    permissions = $3,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateRoleParams struct {
	ID          int32
	RoleName    string
	Permissions []string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.ID, arg.RoleName, arg.Permissions)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2,
    email = $3,
    password = $4,
    first_name = $5,
    last_name = $6,
    phone_number = $7,
    is_active = $8,
    role = $9,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, username, email, password, first_name, last_name, phone_number, is_active, role, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID          int32
	Username    string
	Email       string
	Password    string
	FirstName   pgtype.Text
	LastName    pgtype.Text
	PhoneNumber pgtype.Text
	IsActive    pgtype.Bool
	Role        int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.IsActive,
		arg.Role,
	)
	return err
}
